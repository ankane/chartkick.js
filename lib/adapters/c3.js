// Generated by CoffeeScript 1.8.0
(function() {
  'use strict';
  var Chartkick, merge;

  Chartkick = window.Chartkick;

  merge = Chartkick.utils.merge;

  Chartkick.adapters.push(new function() {
    var defaultOptions, hideLegend, jsOptions, setMax, setMin, setStacked;
    this.name = 'c3';
    defaultOptions = {
      chart: {},
      xAxis: {
        labels: {
          style: {
            fontSize: '12px'
          }
        }
      },
      yAxis: {
        title: {
          text: null
        },
        labels: {
          style: {
            fontSize: '12px'
          }
        }
      },
      title: {
        text: null
      },
      credits: {
        enabled: false
      },
      legend: {
        borderWidth: 0
      },
      tooltip: {
        style: {
          fontSize: '12px'
        }
      },
      plotOptions: {
        areaspline: {},
        series: {
          marker: {}
        }
      }
    };
    hideLegend = function(options) {
      return options.legend.enabled = false;
    };
    setMin = function(options, min) {
      return options.yAxis.min = min;
    };
    setMax = function(options, max) {
      return options.yAxis.max = max;
    };
    setStacked = function(options) {
      return options.plotOptions.series.stacking = 'normal';
    };
    jsOptions = Chartkick.utils.jsOptionsFunc(defaultOptions, hideLegend, setMin, setMax, setStacked);
    this.renderLineChart = function(chart, chartType) {
      var columns, data, groups, item, series, x, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
      if (chartType == null) {
        chartType = 'spline';
      }
      if (/^area/.test(chartType)) {
        chart.options.stacked = true;
      }
      columns = [];
      groups = [];
      x = ['x'];
      _ref = chart.data[0].data;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        x.push(item[0]);
      }
      columns.push(x);
      _ref1 = chart.data;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        series = _ref1[_j];
        data = [series.name];
        _ref2 = series.data;
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          item = _ref2[_k];
          data.push(item[1]);
        }
        columns.push(data);
        if (chart.options.stacked) {
          groups.push(data[0]);
        }
      }
      return c3.generate({
        bindto: chart.element,
        data: {
          x: 'x',
          xFormat: '%Y-%m-%d %H:%M:%S %Z',
          columns: columns,
          type: chartType,
          groups: [groups]
        },
        color: {
          pattern: chart.options.colors
        },
        axis: {
          y: {
            tick: {},
            padding: {
              top: 0,
              bottom: 0
            }
          },
          x: {
            type: chart.options.discrete ? 'category' : 'timeseries',
            padding: {
              left: 0,
              right: 0
            }
          }
        },
        legend: {
          show: false
        },
        grid: {
          y: {
            show: true
          }
        }
      });
    };
    this.renderPieChart = function(chart) {
      var chartOptions, options;
      chartOptions = {};
      if (chart.options.colors) {
        chartOptions.colors = chart.options.colors;
      }
      options = merge(merge(defaultOptions, chartOptions), chart.options.library || {});
      return c3.generate({
        bindto: chart.element,
        data: {
          columns: chart.data,
          type: 'pie'
        },
        color: {
          pattern: chart.options.colors
        },
        legend: {
          position: 'right'
        }
      });
    };
    this.renderColumnChart = function(chart, rotated) {
      var columns, data, groups, item, options, series, _i, _j, _len, _len1, _ref, _ref1;
      if (rotated == null) {
        rotated = false;
      }
      series = chart.data;
      options = jsOptions(series, chart.options);
      options.chart.type = 'bar';
      options.chart.renderTo = chart.element.id;
      groups = [];
      columns = [];
      _ref = chart.data;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        series = _ref[_i];
        data = [series.name];
        _ref1 = series.data;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          item = _ref1[_j];
          data.push(item[1]);
        }
        columns.push(data);
        if (chart.options.stacked) {
          groups.push(data[0]);
        }
      }
      return c3.generate({
        bindto: chart.element,
        data: {
          columns: columns,
          type: 'bar',
          groups: [groups]
        },
        color: {
          pattern: chart.options.colors
        },
        bar: {
          width: {
            ratio: 0.5
          }
        },
        axis: {
          rotated: rotated,
          y: {
            tick: {},
            min: 0,
            padding: {
              top: 0,
              bottom: 0
            }
          }
        },
        legend: {
          show: false
        },
        grid: {
          y: {
            show: true
          }
        }
      });
    };
    this.renderAreaChart = (function(_this) {
      return function(chart) {
        return _this.renderLineChart(chart, 'area-spline');
      };
    })(this);
    this.renderBarChart = (function(_this) {
      return function(chart) {
        return _this.renderColumnChart(chart, true);
      };
    })(this);
    return this;
  });

}).call(this);
