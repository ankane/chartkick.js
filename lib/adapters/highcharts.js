// Generated by CoffeeScript 1.8.0
(function() {
  'use strict';
  var Chartkick, merge;

  Chartkick = window.Chartkick;

  merge = Chartkick.utils.merge;

  Chartkick.adapters.push(new function() {
    var defaultOptions, hideLegend, jsOptions, setMax, setMin, setStacked;
    this.name = 'highcharts';
    defaultOptions = {
      chart: {},
      xAxis: {
        labels: {
          style: {
            fontSize: '12px'
          }
        }
      },
      yAxis: {
        title: {
          text: null
        },
        labels: {
          style: {
            fontSize: '12px'
          }
        }
      },
      title: {
        text: null
      },
      credits: {
        enabled: false
      },
      legend: {
        borderWidth: 0
      },
      tooltip: {
        style: {
          fontSize: '12px'
        }
      },
      plotOptions: {
        areaspline: {},
        series: {
          marker: {}
        }
      }
    };
    hideLegend = function(options) {
      return options.legend.enabled = false;
    };
    setMin = function(options, min) {
      return options.yAxis.min = min;
    };
    setMax = function(options, max) {
      return options.yAxis.max = max;
    };
    setStacked = function(options) {
      return options.plotOptions.series.stacking = 'normal';
    };
    jsOptions = Chartkick.utils.jsOptionsFunc(defaultOptions, hideLegend, setMin, setMax, setStacked);
    this.renderLineChart = function(chart, chartType) {
      var chartOptions, item, options, section, _i, _j, _len, _len1, _ref, _ref1;
      if (chartType == null) {
        chartType = 'spline';
      }
      chartOptions = chartType === 'areaspline' ? {
        plotOptions: {
          areaspline: {
            stacking: 'normal'
          },
          series: {
            marker: {
              enabled: false
            }
          }
        }
      } : {};
      options = jsOptions(chart.data, chart.options, chartOptions);
      options.xAxis.type = chart.options.discrete ? 'category' : 'datetime';
      options.chart.type = chartType;
      options.chart.renderTo = chart.element.id;
      _ref = chart.data;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        section = _ref[_i];
        if (!chart.options.discrete) {
          _ref1 = section.data;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            item = _ref1[_j];
            item[0] = item[0].getTime();
          }
        }
        section.marker = {
          symbol: 'circle'
        };
      }
      options.series = chart.data;
      return new Highcharts.Chart(options);
    };
    this.renderPieChart = function(chart) {
      var chartOptions, options;
      chartOptions = {};
      if (chart.options.colors) {
        chartOptions.colors = chart.options.colors;
      }
      options = merge(merge(defaultOptions, chartOptions), chart.options.library || {});
      options.chart.renderTo = chart.element.id;
      options.series = [
        {
          type: 'pie',
          name: 'Value',
          data: chart.data
        }
      ];
      return new Highcharts.Chart(options);
    };
    this.renderColumnChart = function(chart, chartType) {
      var categories, category, d, i, options, rows, s, series, _i, _j, _len, _len1, _ref;
      if (chartType == null) {
        chartType = 'column';
      }
      series = chart.data;
      options = jsOptions(series, chart.options);
      options.chart.type = chartType;
      options.chart.renderTo = chart.element.id;
      rows = [];
      for (i = _i = 0, _len = series.length; _i < _len; i = ++_i) {
        s = series[i];
        _ref = s.data;
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          d = _ref[_j];
          if (!rows[d[0]]) {
            rows[d[0]] = new Array(series.length);
          }
          rows[d[0]][i] = d[1];
        }
      }
      categories = (function() {
        var _results;
        _results = [];
        for (i in rows) {
          if (rows.hasOwnProperty(i)) {
            _results.push(i);
          }
        }
        return _results;
      })();
      options.xAxis.categories = categories;
      options.series = (function() {
        var _k, _len2, _results;
        _results = [];
        for (i = _k = 0, _len2 = series.length; _k < _len2; i = ++_k) {
          s = series[i];
          _results.push({
            name: s.name,
            data: (function() {
              var _l, _len3, _results1;
              _results1 = [];
              for (_l = 0, _len3 = categories.length; _l < _len3; _l++) {
                category = categories[_l];
                _results1.push(rows[category][i] || 0);
              }
              return _results1;
            })()
          });
        }
        return _results;
      })();
      return new Highcharts.Chart(options);
    };
    this.renderBarChart = (function(_this) {
      return function(chart) {
        return _this.renderColumnChart(chart, 'bar');
      };
    })(this);
    this.renderAreaChart = (function(_this) {
      return function(chart) {
        return _this.renderLineChart(chart, 'areaspline');
      };
    })(this);
    return this;
  });

}).call(this);
